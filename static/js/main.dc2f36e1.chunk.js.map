{"version":3,"sources":["components/Layout/Footer.jsx","components/Layout/Header.jsx","components/hooks/useFormCheck.jsx","components/Tasks/TaskForm/TaskForm.jsx","components/Tasks/TaskForm/TaskFormFunctionality.jsx","functions/sortTasks.js","components/Tasks/TaskList/TaskList.jsx","components/UI/SortList.jsx","components/Layout/Main.jsx","App.jsx","index.js"],"names":["Footer","id","className","Header","useFormCheck","currentTitle","currentDate","currentDescription","useState","title","date","desc","isTouched","setIsTouched","titleCheck","trim","dateCheck","slice","Date","toISOString","descCheck","titleBlurHandler","dateBlurHandler","descBlurHandler","TaskForm","props","submitHandler","changeHandler","onSubmit","name","type","onChange","onBlur","rows","TaskFormFunctionality","addTaskHandler","currentId","setCurrentId","setCurrentTitle","setCurrentDescription","setCurrentDate","importantTask","setImportantTask","e","preventDefault","task","description","prevState","target","value","time","checked","sortTasks","sortDirection","tasks","sort","current","a","b","TaskList","taskList","normalTasks","importantTasks","finishedTasks","actualDate","toLocaleString","map","item","onClick","deleted","finished","SortList","sortingMethod","ref","defaultValue","Main","finishTaskHandle","deleteTaskHandle","taskTypes","setSortDirection","sortingMethodNormal","useRef","sortingMethodImportant","sortingMethodFinished","useEffect","normal","important","App","setTasks","TASK_TYPES","recognizer","clickedTask","findIndex","x","push","splice","newTask","importance","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc2f36e1.chunk.js","sourcesContent":["import \"../../styles/SCSS/footer.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer id=\"footer\">\r\n      <p className=\"footer_title\">Made by Remigiusz Wo≈∫niak</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import \"../../styles/SCSS/header.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header id=\"header\">\r\n      <h1 className=\"header_title\">Todo</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from \"react\";\r\n\r\nconst useFormCheck = (currentTitle, currentDate, currentDescription) => {\r\n  const [isTouched, setIsTouched] = useState({\r\n    title: false,\r\n    date: false,\r\n    desc: false,\r\n  });\r\n\r\n  const titleCheck = currentTitle.trim() === \"\" && isTouched.title;\r\n\r\n  const dateCheck =\r\n    currentDate.slice(0, 10) < new Date().toISOString().slice(0, 10) &&\r\n    isTouched.date;\r\n\r\n  const descCheck = currentDescription.trim() === \"\" && isTouched.desc;\r\n\r\n  const titleBlurHandler = () => {\r\n    setIsTouched({ ...isTouched, title: true });\r\n  };\r\n\r\n  const dateBlurHandler = () => {\r\n    setIsTouched({ ...isTouched, date: true });\r\n  };\r\n\r\n  const descBlurHandler = () => {\r\n    setIsTouched({ ...isTouched, desc: true });\r\n  };\r\n\r\n  return {\r\n    titleCheck,\r\n    dateCheck,\r\n    descCheck,\r\n    titleBlurHandler,\r\n    dateBlurHandler,\r\n    descBlurHandler,\r\n  };\r\n};\r\n\r\nexport default useFormCheck;\r\n","import \"../../../styles/SCSS/taskForm.scss\";\r\n\r\nconst TaskForm = (props) => {\r\n  const {\r\n    submitHandler,\r\n    changeHandler,\r\n    titleCheck,\r\n    dateCheck,\r\n    descCheck,\r\n    titleBlurHandler,\r\n    dateBlurHandler,\r\n    descBlurHandler,\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"taskFormSpace\">\r\n      <form onSubmit={submitHandler} className=\"taskFormSpace_taskForm\">\r\n        <h1 className=\"taskForm_title\">Enter information</h1>\r\n        <div className=\"taskForm_informationSpace\">\r\n          <label className=\"informationSpace_title\">Title:</label>{\" \"}\r\n          <input\r\n            className=\"informationSpace_input\"\r\n            name=\"currentTitle\"\r\n            type=\"text\"\r\n            onChange={changeHandler}\r\n            onBlur={titleBlurHandler}\r\n          />\r\n        </div>\r\n        {titleCheck && (\r\n          <p className=\"taskForm_errorMessage\">Please provide title.</p>\r\n        )}\r\n        <div className=\"taskForm_informationSpace\">\r\n          <label className=\"informationSpace_title\">Date:</label>{\" \"}\r\n          <input\r\n            className=\"informationSpace_input informationSpace_input-date\"\r\n            name=\"currentDate\"\r\n            type=\"datetime-local\"\r\n            onChange={changeHandler}\r\n            onBlur={dateBlurHandler}\r\n          />\r\n        </div>\r\n        {dateCheck && (\r\n          <p className=\"taskForm_errorMessage\">Please select future date.</p>\r\n        )}\r\n        <div className=\"taskForm_informationSpace\">\r\n          <label className=\"informationSpace_title\">Description:</label>{\" \"}\r\n          <textarea\r\n            className=\"informationSpace_input\"\r\n            name=\"currentDescription\"\r\n            rows={8}\r\n            onChange={changeHandler}\r\n            onBlur={descBlurHandler}\r\n          />\r\n        </div>\r\n        {descCheck && (\r\n          <p className=\"taskForm_errorMessage\">Please provide description.</p>\r\n        )}\r\n        <div className=\"taskForm_informationSpace\">\r\n          <label className=\"informationSpace_title\">Important:</label>{\" \"}\r\n          <input\r\n            className=\"informationSpace_input informationSpace_input-importantCheckbox\"\r\n            name=\"importantTask\"\r\n            type=\"checkbox\"\r\n            onChange={changeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"taskForm_buttonSpace\">\r\n          <button type=\"submit\" className=\"buttonSpace_button\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import { useState } from \"react\";\r\n\r\nimport useFormCheck from \"../../hooks/useFormCheck\";\r\n\r\nimport TaskForm from \"./TaskForm\";\r\n\r\nconst TaskFormFunctionality = (props) => {\r\n  const { addTaskHandler } = props;\r\n\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [currentTitle, setCurrentTitle] = useState(\"\");\r\n  const [currentDescription, setCurrentDescription] = useState(\"\");\r\n  const [currentDate, setCurrentDate] = useState(\"\");\r\n  const [importantTask, setImportantTask] = useState(false);\r\n\r\n  const {\r\n    titleCheck,\r\n    dateCheck,\r\n    descCheck,\r\n    titleBlurHandler,\r\n    dateBlurHandler,\r\n    descBlurHandler,\r\n  } = useFormCheck(currentTitle, currentDate, currentDescription);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (titleCheck || dateCheck || descCheck) {\r\n      return;\r\n    }\r\n\r\n    const task = {\r\n      id: currentId,\r\n      title: currentTitle,\r\n      description: currentDescription,\r\n      date: currentDate,\r\n    };\r\n\r\n    if (importantTask === false) {\r\n      addTaskHandler(task, false);\r\n      setCurrentId((prevState) => prevState + 1);\r\n    } else {\r\n      addTaskHandler(task, true);\r\n      setCurrentId((prevState) => prevState + 1);\r\n    }\r\n  };\r\n\r\n  const changeHandler = (e) => {\r\n    const name = e.target.name;\r\n\r\n    if (name === \"currentDate\") {\r\n      const date = e.target.value.slice(0, 10);\r\n      const time = e.target.value.slice(11);\r\n      const dateTime = date + \" \" + time;\r\n      setCurrentDate(dateTime);\r\n    } else {\r\n      if (name === \"currentTitle\") {\r\n        setCurrentTitle(e.target.value);\r\n      } else if (name === \"currentDescription\") {\r\n        setCurrentDescription(e.target.value);\r\n      }\r\n    }\r\n\r\n    if (name === \"importantTask\" && e.target.checked) {\r\n      setImportantTask(true);\r\n    } else if (name === \"importantTask\") {\r\n      setImportantTask(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TaskForm\r\n      submitHandler={submitHandler}\r\n      changeHandler={changeHandler}\r\n      titleCheck={titleCheck}\r\n      dateCheck={dateCheck}\r\n      descCheck={descCheck}\r\n      titleBlurHandler={titleBlurHandler}\r\n      dateBlurHandler={dateBlurHandler}\r\n      descBlurHandler={descBlurHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TaskFormFunctionality;\r\n","const sortTasks = (sortDirection, tasks, sort) => {\r\n  switch (sortDirection ? sort.current.value : \"A-Z\") {\r\n    case \"A-Z\":\r\n      return tasks.sort((a, b) => (a.title > b.title ? 1 : -1));\r\n    case \"Z-A\":\r\n      return tasks.sort((a, b) => (a.title < b.title ? 1 : -1));\r\n    case \"New-old\":\r\n      return tasks.sort((a, b) => (a.date > b.date ? 1 : -1));\r\n    case \"Old-new\":\r\n      return tasks.sort((a, b) => (a.date < b.date ? 1 : -1));\r\n    default:\r\n      return tasks.sort((a, b) => (a.title > b.title ? 1 : -1));\r\n  }\r\n};\r\n\r\nexport default sortTasks;\r\n","import sortTasks from \"../../../functions/sortTasks\";\r\n\r\nimport \"../../../styles/SCSS/taskList.scss\";\r\n\r\nconst TaskList = (props) => {\r\n  const { sortDirection, sort, tasks, type } = props;\r\n\r\n  let taskList = tasks.normalTasks;\r\n\r\n  if (type === \"IMPORTANT\") taskList = tasks.importantTasks;\r\n  else if (type === \"FINISHED\") taskList = tasks.finishedTasks;\r\n\r\n  const actualDate = new Date().toLocaleString();\r\n\r\n  const sortedTasks = sortTasks(sortDirection, taskList, sort);\r\n\r\n  return sortedTasks.map((item) => {\r\n    return (\r\n      <li key={type.slice(0, 3) + item.id} className=\"taskList_task\">\r\n        <h4 className=\"task_title\">{item.title}</h4>\r\n        <p className=\"task_date\">{item.date}</p>\r\n        {type === \"FINISHED\" && (\r\n          <p className=\"task_date\">(Termination date: {actualDate})</p>\r\n        )}\r\n        <p className=\"task_description\">{item.description}</p>\r\n        <div className=\"task_buttonSpace\">\r\n          <button\r\n            className=\"buttonSpace_deleteButton\"\r\n            onClick={() => props.deleted(item.id, type)}\r\n          >\r\n            Delete\r\n          </button>\r\n          {type !== \"FINISHED\" && (\r\n            <button\r\n              className=\"buttonSpace_finishButton\"\r\n              onClick={() => props.finished(item.id, type)}\r\n            >\r\n              Finish\r\n            </button>\r\n          )}\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\nexport default TaskList;\r\n","import \"../../styles/SCSS/sortList.scss\";\r\n\r\nconst SortList = (props) => {\r\n  const { sortingMethod, changeHandler } = props;\r\n  return (\r\n    <select\r\n      ref={sortingMethod}\r\n      onChange={changeHandler}\r\n      className=\"sortList\"\r\n      defaultValue={\"A-Z\"}\r\n    >\r\n      <option value=\"A-Z\">A-Z</option>\r\n      <option value=\"Z-A\">Z-A</option>\r\n      <option value=\"New-old\">New - old</option>\r\n      <option value=\"Old-new\">Old - new</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SortList;\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nimport \"../../styles/SCSS/main.scss\";\r\n\r\nimport TaskFormFunctionality from \"../Tasks/TaskForm/TaskFormFunctionality\";\r\nimport TaskList from \"../Tasks/TaskList/TaskList\";\r\nimport SortList from \"../UI/SortList\";\r\n\r\nconst Main = (props) => {\r\n  const {\r\n    tasks,\r\n    finishTaskHandle,\r\n    deleteTaskHandle,\r\n    addTaskHandler,\r\n    taskTypes,\r\n  } = props;\r\n\r\n  const [sortDirection, setSortDirection] = useState(false);\r\n\r\n  const sortingMethodNormal = useRef(\"\");\r\n  const sortingMethodImportant = useRef(\"\");\r\n  const sortingMethodFinished = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    setSortDirection({ sortDirection: true });\r\n  }, []);\r\n\r\n  const changeHandler = (e) => {\r\n    const name = e.target.name;\r\n    setSortDirection({ [name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <main id=\"mainSection\">\r\n      <TaskFormFunctionality addTaskHandler={addTaskHandler} />\r\n      <section className=\"mainSection_taskSpace\">\r\n        <div className=\"taskSpace_titleAndSortSpace\">\r\n          <h3 className=\"titleAndSortSpace_title\">Todo tasks</h3>\r\n          <SortList\r\n            sortingMethod={sortingMethodNormal}\r\n            changeHandler={changeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"taskSpace_taskListSpace\">\r\n          <ul className=\"taskListSpace_taskList\">\r\n            <TaskList\r\n              type={taskTypes.normal}\r\n              tasks={tasks}\r\n              finished={finishTaskHandle}\r\n              deleted={deleteTaskHandle}\r\n              sort={sortingMethodNormal}\r\n              sortDirection={sortDirection}\r\n            />\r\n          </ul>\r\n        </div>\r\n      </section>\r\n      <section className=\"mainSection_taskSpace\">\r\n        <div className=\"taskSpace_titleAndSortSpace\">\r\n          <h3 className=\"titleAndSortSpace_Title\">Important tasks</h3>\r\n          <SortList\r\n            sortingMethod={sortingMethodImportant}\r\n            changeHandler={changeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"taskSpace_taskListSpace\">\r\n          <ul className=\"taskListSpace_taskList\">\r\n            <TaskList\r\n              type={taskTypes.important}\r\n              tasks={tasks}\r\n              finished={finishTaskHandle}\r\n              deleted={deleteTaskHandle}\r\n              sort={sortingMethodImportant}\r\n              sortDirection={sortDirection}\r\n            />\r\n          </ul>\r\n        </div>\r\n      </section>\r\n      <section className=\"mainSection_taskSpace\">\r\n        <div className=\"taskSpace_titleAndSortSpace\">\r\n          <h3 className=\"titleAndSortSpace_Title\">Finished tasks</h3>\r\n          <SortList\r\n            sortingMethod={sortingMethodFinished}\r\n            changeHandler={changeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"taskSpace_taskListSpace\">\r\n          <ul className=\"taskListSpace_taskList\">\r\n            <TaskList\r\n              type={taskTypes.finished}\r\n              tasks={tasks}\r\n              deleted={deleteTaskHandle}\r\n              sort={sortingMethodFinished}\r\n              sortDirection={sortDirection}\r\n            />\r\n          </ul>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { useState } from \"react\";\r\n\r\nimport Footer from \"./components/Layout/Footer\";\r\nimport Header from \"./components/Layout/Header\";\r\nimport Main from \"./components/Layout/Main\";\r\n\r\nimport \"./styles/SCSS/app.scss\";\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState({\r\n    normalTasks: [],\r\n    importantTasks: [],\r\n    finishedTasks: [],\r\n  });\r\n\r\n  const TASK_TYPES = {\r\n    normal: \"NORMAL\",\r\n    important: \"IMPORTANT\",\r\n    finished: \"FINISHED\",\r\n  };\r\n\r\n  const finishTaskHandle = (id, recognizer) => {\r\n    if (recognizer === TASK_TYPES.normal) {\r\n      const clickedTask = tasks.normalTasks.findIndex((x) => x.id === id);\r\n\r\n      tasks.finishedTasks.push(tasks.normalTasks[clickedTask]);\r\n      tasks.normalTasks.splice(clickedTask, 1);\r\n\r\n      setTasks((prevState) => ({\r\n        normalTasks: [...tasks.normalTasks],\r\n        importantTasks: [...prevState.importantTasks],\r\n        finishedTasks: [...prevState.finishedTasks],\r\n      }));\r\n    } else if (recognizer === TASK_TYPES.important) {\r\n      const clickedTask = tasks.importantTasks.findIndex((x) => x.id === id);\r\n\r\n      tasks.finishedTasks.push(tasks.importantTasks[clickedTask]);\r\n      tasks.importantTasks.splice(clickedTask, 1);\r\n\r\n      setTasks((prevState) => ({\r\n        normalTasks: [...prevState.normalTasks],\r\n        importantTasks: [...tasks.importantTasks],\r\n        finishedTasks: [...prevState.finishedTasks],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteTaskHandle = (id, recognizer) => {\r\n    let clickedTask;\r\n    switch (recognizer) {\r\n      case TASK_TYPES.finished:\r\n        clickedTask = tasks.finishedTasks.findIndex((x) => x.id === id);\r\n\r\n        tasks.finishedTasks.splice(clickedTask, 1);\r\n\r\n        setTasks((prevState) => ({\r\n          normalTasks: [...tasks.normalTasks],\r\n          importantTasks: [...prevState.importantTasks],\r\n          finishedTasks: [...prevState.finishedTasks],\r\n        }));\r\n        break;\r\n\r\n      case TASK_TYPES.normal:\r\n        clickedTask = tasks.normalTasks.findIndex((x) => x.id === id);\r\n\r\n        tasks.normalTasks.splice(clickedTask, 1);\r\n\r\n        setTasks((prevState) => ({\r\n          normalTasks: [...tasks.normalTasks],\r\n          importantTasks: [...prevState.importantTasks],\r\n          finishedTasks: [...prevState.finishedTasks],\r\n        }));\r\n        break;\r\n\r\n      case TASK_TYPES.important:\r\n        clickedTask = tasks.importantTasks.findIndex((x) => x.id === id);\r\n\r\n        tasks.importantTasks.splice(clickedTask, 1);\r\n\r\n        setTasks((prevState) => ({\r\n          normalTasks: [...prevState.normalTasks],\r\n          importantTasks: [...tasks.importantTasks],\r\n          finishedTasks: [...prevState.finishedTasks],\r\n        }));\r\n        break;\r\n      default:\r\n        setTasks((prevState) => ({\r\n          normalTasks: [...prevState.normalTasks],\r\n          importantTasks: [...prevState.importantTasks],\r\n          finishedTasks: [...prevState.finishedTasks],\r\n        }));\r\n        break;\r\n    }\r\n  };\r\n\r\n  const addTaskHandler = (newTask, importance) => {\r\n    if (importance === false) {\r\n      setTasks((prevState) => ({\r\n        normalTasks: [...tasks.normalTasks, newTask],\r\n        importantTasks: [...prevState.importantTasks],\r\n        finishedTasks: [...prevState.finishedTasks],\r\n      }));\r\n    } else if (importance === true) {\r\n      setTasks((prevState) => ({\r\n        normalTasks: [...prevState.normalTasks],\r\n        importantTasks: [...tasks.importantTasks, newTask],\r\n        finishedTasks: [...prevState.finishedTasks],\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Header />\r\n      <Main\r\n        taskTypes={TASK_TYPES}\r\n        tasks={tasks}\r\n        finishTaskHandle={finishTaskHandle}\r\n        deleteTaskHandle={deleteTaskHandle}\r\n        addTaskHandler={addTaskHandler}\r\n      />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}